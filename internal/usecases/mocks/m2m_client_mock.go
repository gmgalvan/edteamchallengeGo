// Code generated by MockGen. DO NOT EDIT.
// Source: gmgalvan/edChallenge2021/internal/usecases (interfaces: M2MClientCall)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockM2MClientCall is a mock of M2MClientCall interface.
type MockM2MClientCall struct {
	ctrl     *gomock.Controller
	recorder *MockM2MClientCallMockRecorder
}

// MockM2MClientCallMockRecorder is the mock recorder for MockM2MClientCall.
type MockM2MClientCallMockRecorder struct {
	mock *MockM2MClientCall
}

// NewMockM2MClientCall creates a new mock instance.
func NewMockM2MClientCall(ctrl *gomock.Controller) *MockM2MClientCall {
	mock := &MockM2MClientCall{ctrl: ctrl}
	mock.recorder = &MockM2MClientCallMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockM2MClientCall) EXPECT() *MockM2MClientCallMockRecorder {
	return m.recorder
}

// GET mocks base method.
func (m *MockM2MClientCall) GET(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GET", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GET indicates an expected call of GET.
func (mr *MockM2MClientCallMockRecorder) GET(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GET", reflect.TypeOf((*MockM2MClientCall)(nil).GET), arg0)
}
